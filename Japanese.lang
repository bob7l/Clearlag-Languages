# version(1) - Translated by https://github.com/ethernetcat
# Welcome to Clearlag's language file! Here you can modify the various strings ClearLag uses to suit your language, or preference
# -- NOTE: This is the format: '<key>({replaceables}...):<message>'
# -- NOTE: The replaceables are replaced depending on order, not the actual key name. So you may customize the key names too!
# -- NOTE: The { ... } symbols represent a message block. This is applicable anywhere you want... Do not include any characters with {, or }

####----> Commands -->
command.error.wrongUsage({usage},{name})=&c間違った使用法: &8/&7lagg {name} {usage}
command.error.noPermission({name})=&8/&7lagg {name}&cを使用する権限がありません
command.error.onlyForPlayer()=&cこのコマンドはプレイヤーのみが使用できます！

##]-> /lagg
command.lagg.nopermission()=&cこのコマンドを使用する権限がありません！
command.lagg.header()=&3-------------(&b&lClearlag コマンド&3)-------------
command.lagg.footer()=&3----------------------------------------------------
command.lagg.helpline({name},{desc})= &4- &8/&3lagg &b{name} &f -  {desc}

##]-> /lagg admin
command.admin.name()=admin
command.admin.desc()=(Clearlagモジュールの制御)
command.admin.usage()=
command.admin.enabledModules({moduleList})=&aリロード可能なモジュールを有効化: &7{moduleList}
command.admin.noReloadableFields({module})={module} &cにはリロード可能なフィールドが含まれていません！
command.admin.notEnabled({module})=&cこのモジュールは有効になっていません！
command.admin.reload({module})=&aモジュール {module} がリロードされました！
command.admin.failedReload({module})=&cモジュール {module} のリロードに失敗しました！
command.admin.invalidModule({argument})=&c無効なモジュール: {argument}
command.admin.enabledModules({modules})=&a有効なモジュール: &7{modules}
command.admin.stoppedModule({module})=&aモジュール {module} が &c停止&aしました！
command.admin.startableModules({modules})=&a起動可能なモジュール: &7{modules}
command.admin.alreadyEnabled({module})=&cモジュールは既に有効になっています！
command.admin.enabled({module})=&aモジュール {module} が有効になりました！
command.admin.moduleStatus({listeners},{commands},{tasks},{modules})={
&3=--------------[&6-&3] &b&lモジュール ステータス &3[&6-&3]----------------=
              &8[&7グレー = 無効&8]   &8[&a緑 = 有効&8]
&6リスナー: {commands}
&6コマンド: {commands}
&6タスク: {tasks}
&6モジュール: {modules}
}
command.admin.help()={
&3=-------------[&6-&3] &b&lモジュール コマンド &3[&6-&3]---------------=
&4  - &3/lagg admin &creload &b<モジュール>
&4  - &3/lagg admin &cstop &b<モジュール>
&4  - &3/lagg admin &cstart &b<モジュール>
&4  - &3/lagg admin &clist
&3-----------------------------------------------------
}

##]-> /lagg area
command.area.name()=area
command.area.usage()=<半径>
command.area.desc()=(半径からエンティティを削除)
command.area.error({arg})=&4無効な引数が指定されました&8: &c{arg}
command.area.message({removed},{radius})=&6[&aClearLag&6] &3{removed}&b個のエンティティが半径 &3{radius}&b 以内から削除されました！

##]-> /lagg checkchunk
command.checkchunk.name()=checkchunk
command.checkchunk.usage()=
command.checkchunk.desc()=(チャンクのエンティティを表示)
command.checkchunk.header()=&4*&3&m                            &8(&a&lチャンク 情報&8)&3&m                              &4*
command.checkchunk.tilelist()=&3 タイル エンティティ&8:
command.checkchunk.entitylist()=&3 エンティティ&8:
command.checkchunk.line({count},{type})=   &8- &ax{count} &7{type}
command.checkchunk.footer()=&4*&3&m                                                                             &4*

##]-> /lagg check
command.check.name()=check
command.check.usage()=[ワールド１、 ワールド２...]
command.check.desc()=(ワールド内のエンティティをカウント)
command.check.invalidworld({arg})=&4無効な引数が指定されました&8: {arg}
command.check.header()=&4*&3&m                          &8(&a&lサーバー ステータス&8)&3&m                           &4*
command.check.printed({removed1},{mobs},{animals},{players},{chunks},{activehoppers},{inactivehoppers},{spawners},{uptime},{tps},{usedmemory},{maxmemory},{freememory})={
&3   地上のアイテム: &b{removed1}
&3   生きているMob: &b{mobs}
&3   生きている友好Mob: &b{animals}
&3   生きているプレイヤー: &b{players}
&3   ロードされたチャンク: &b{chunks}
&3   有効なホッパー: &b{activehoppers}
&3   アイドル中のホッパー: &b{inactivehoppers}
&3   有効なMobスポナー: &b{spawners}
&3   稼働時間: &b{uptime}
&3   現在のTPS: &b{tps}
&3   使用中のRAM: &b{usedmemory}&7/&b{maxmemory} &7MB
&3   空きメモリ: &b{freememory} &7MB
}
command.check.footer()=&4*&3&m                                                                             &4*

##]-> /lagg chunk
command.chunk.name()=chunk
command.chunk.usage()=[list-size]
command.chunk.desc()=(遅延チャンクを見つける)
command.chunk.header()=&7&m                           &7( &b最大 チャンク &7)&m                           "
command.chunk.print({order},{world},{x},{z},{count})=&4{order}&7) &3ワールド: &b{world}  &3x: &b{x}  &3z: &b{z}  &3エンティティ: &b{count}

##]-> /lagg clear
command.clear.name()=clear
command.clear.usage()=
command.clear.desc()=(ワールドからエンティティを削除)
command.clear.message({count})=&6[&aClearLag&6] &a&3{count}&b個のエンティティを削除しました！

##]-> /lagg gc
command.gc.name()=gc
command.gc.usage()=
command.gc.desc()=(ガベージコレクションをリクエスト)
command.gc.message()=&6[&aClearLag&6] &a&bガベージコレクションをリクエストしています！&7(芸国: Java VMは自動的かつ効率的に空きメモリを管理します。このコマンドは、大きなヒープをデバッグまたは強制的にクリアするためにのみ使用して下さい)

##]-> /lagg halt
command.halt.name()=halt
command.halt.usage()=[on/off]
command.halt.desc()=(サーバーアクティビティを停止)
command.halt.halted()=&6[&aClearLag&6] &a&bサーバーのアクティビティが&c停止しました&b！
command.halt.unhalted()=&6[&aClearLag&6] &a&aサーバーのアクティビティの停止が中断されました！

##]-> /lagg killmobs
command.killmobs.name()=killmobs
command.killmobs.usage()=
command.killmobs.desc()=(ワールドからMobを削除)
command.killmobs.message({count})=&6[&aClearLag&6] &a&3{count}&b体のMobが削除されました！

##]-> /lagg profile
command.profile.name()=profile
command.profile.usage()=<サンプル秒数> <サンプルタイプ>
command.profile.desc()=(プロファイルラグを引き起こすイベント)
command.profile.invalidtime({arg})=&4無効なサンプルタイムが指定されました&8: &c{arg}
command.profile.invalidprofiler({arg},{profilers})={
&4無効なプロファイラが指定されました&8: &c{arg}
&c有効なプロファイラ&8: &7{profilers}
}
command.profile.nosamples()=&cサンプルタイム中に記録されたサンプルはありません
command.profile.header()=&7&m                           &7( &bチャンク サンプル &7)&m
command.profile.line({listing},{world},{x},{z},{samples})=&4{listing}&7) &3ワールド: &b{world}&7, &3x: &b{x}&7, &3z: &b{z}   &3サンプルサイズ: &b{samples}
command.profile.started({time})=&6[&aClearLag&6] &aプロファイラが起動し、&7{time}&a秒間実行されました

##]-> /lagg reload
command.reload.name()=reload
command.reload.usage()=
command.reload.desc()=(Clearlagをリロード)
command.reload.begin()=&6[&aClearLag&6] &bモジュールをリロードしようとしています...
command.reload.successful()=&6[&aClearLag&6] &bモジュールがリロードされました！

##]-> /lagg samplememory
command.samplememory.name()=samplememory
command.samplememory.usage()=<サンプル秒数>
command.samplememory.desc()=(サンプルメモリ/GC使用量)
command.samplememory.invalidinteger({arg})=&4無効な整数が指定されました&8: &c{arg}
command.samplememory.begin({time})=&aメモリサンプラーを&7{time}&a秒間実行する
command.samplememory.header()=&4*&3&m                       &8(&a&lメモリtick ステータス&8)&3&m                        &4*
command.samplememory.memory({high},{average})={
&aメモリ (MB):
&3   tickごとの最大メモリ使用量: &b{high}
&3   tickごとの平均メモリ使用量: &b{average}
}
command.samplememory.gc({total},{highest},{lowest},{averagetime},{averageticks})={
&aガベージコレクタ (tickに基づく、ミリ秒):
&3   合計GCコレクション (Tick): &b{total}
&3   ガベージコレクタの最大時間: &b{highest}
&3   ガベージコレクタの最小時間: &b{lowest}
&3   ガベージコレクタの平均時間: &b{averagetime}
&3   コレクション間の平均tick: &b{averageticks}
}
command.samplememory.notenoughtime()=&cガベージコレクタの結果に十分な長さのサンプルタイムがありません

##]-> /lagg sampleticks
command.sampleticks.name()=sampleticks
command.sampleticks.usage()=[サンプルtick] [raw/stats]
command.sampleticks.desc()=(サーバーのtickをサンプリング)
command.sampleticks.start({threadname},{time})=&aスレッド &7{threadname}&aで&7{time}&atickの全tickサンプリングを開始&7（100%正確ではなく推定）
command.sampleticks.rawheader()=&c生のtickタイミング: &7（通常の目盛りは０～５０ミリ秒）
command.sampleticks.rawprint({time})=&8 - {time}
command.sampleticks.print({large},{small},{average},{spikes})={
&atick統計: &7（通常の目盛りは０～５０ミリ秒）
&3   最大tick: {large}
&3   最小tick: {small}
&3   平均tick: {average}
&3   スパイク: {spikes}
}

##]-> /lagg tpchunk
command.tpchunk.name()=tpchunk
command.tpchunk.usage()=<x> <z> [ワールド]
command.tpchunk.desc()=(チャンクにテレポート)
command.tpchunk.begin()=&6[&aClearLag&6] &bモジュールをリロードしようとしています...
command.tpchunk.successful()=&6[&aClearLag&6] &bモジュールがリロードされました！
command.tpchunk.invalidinteger({arg})=&4無効な整数が指定されました&8: &c{arg}
command.tpchunk.invalidworld({arg})=&4ワールドが存在しません&8: &c{arg}
command.tpchunk.teleported({x},{z})=&6[&aClearLag&6] &bチャンクにテレポート: &3{x}&7, &3{z}

##]-> /lagg tps
command.tps.name()=tps
command.tps.usage()=
command.tps.desc()=(サーバーの平均tickレートを表示)
command.tps.print({tps})=&6[&aClearLag&6] &a{tps}

##]-> /lagg unloadchunks
command.unloadchunks.name()=unloadchunks
command.unloadchunks.usage()=
command.unloadchunks.desc()=(未使用チャンクをアンロード)
command.unloadchunks.print({chunks})=&6[&aClearLag&6] &3{chunks}&b個のチャンクがアンロードされました！

##]-> /lagg memory
command.memory.name()=memory
command.memory.usage()=[ティックレート]
command.memory.desc()=(ヒープ情報を見る)
command.memory.message()=&3メモリプールリストでJVMヒープサンプリングを開始しました。
command.memory.invalidinteger({arg})=&4無効なポーリングレートが指定されました&8: &c{arg}

##]-> /lagg performance
command.performance.name()=performance
command.performance.usage()=[ティックレート]
command.performance.desc()=(サーバーのパフォーマンスを見る)
command.performance.message()=&3スレッドサンプリング開始 (もっと &1寝てる&3 方が良いよ！)
command.performance.invalidinteger({arg})=&4無効なポーリングレートが指定されました&8: &c{arg}
